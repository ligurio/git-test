#!/usr/bin/env python
# -*- mode: python; coding: utf-8 -*-

# Copyright (c) 2013-2016 Michael Haggerty
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>

# Run "git test --help for the documentation.
#
# The project's main repository is located at
#
#     https://github.com/mhagger/git-test

"""Run tests within a Git project and remember the test results.

`git test` consists of a few things:

* A way of defining tests for a Git project. The commands to be run
  for a particular test are stored in the repository's Git
  configuration.

* Tools for running such tests against single Git commits or against
  ranges of commits.

* A scheme for storing the results of such tests as git notes. The
  results are connected to the tree of the commit that was tested, so
  the test results remain valid across some types of merges, rebases,
  etc.

* The intelligence not to re-run a test whose results are already
  known.

Example: make sure that all commits on a feature branch pass the tests
implied by `make -j16 test` (run the tests in a worktree to avoid
tying up your main repository):

    $ git config test.full.command 'make -j16 test'
    $ git worktree add --detach ../tests feature
    $ cd ../tests
    $ git test run --test=full master..feature

Any time you make changes to the feature branch in your main
repository, you can re-run the last command in the `tests` worktree.
It will only test commits with trees that it hasn't been seen before.

"""

import locale
import sys
import os
import re
import subprocess
import argparse


if not (0x02060000 <= sys.hexversion):
    sys.stderr.write('fatal: Python version 2.6 or later is required')
    sys.exit(125)


PREFERRED_ENCODING = locale.getpreferredencoding()


from subprocess import check_call

# Backwards compatibility:
try:
    from subprocess import CalledProcessError
except ImportError:
    # Use definition from Python 2.7 subprocess module:
    class CalledProcessError(Exception):
        def __init__(self, returncode, cmd, output=None):
            self.returncode = returncode
            self.cmd = cmd
            self.output = output
        def __str__(self):
            return "Command '%s' returned non-zero exit status %d" % (self.cmd, self.returncode)

try:
    from subprocess import check_output
except ImportError:
    # Use definition from Python 2.7 subprocess module:
    def check_output(*popenargs, **kwargs):
        if 'stdout' in kwargs:
            raise ValueError('stdout argument not allowed, it will be overridden.')
        process = subprocess.Popen(stdout=subprocess.PIPE, *popenargs, **kwargs)
        output, unused_err = process.communicate()
        retcode = process.poll()
        if retcode:
            cmd = kwargs.get("args")
            if cmd is None:
                cmd = popenargs[0]
            try:
                raise CalledProcessError(retcode, cmd, output=output)
            except TypeError:
                # Python 2.6's CalledProcessError has no 'output' kw
                raise CalledProcessError(retcode, cmd)
        return output


class Fatal(Exception):
    """An exception that indicates a normal failure of the script.

    Fatals are reported at top level by printing str(e) and exiting
    sys.exit(125) rather than via a Python stack dump.

    """

    pass


class UncleanWorkTreeError(Fatal):
    pass


class UserTestError(CalledProcessError):
    """The user's test failed."""

    pass


def communicate(process, input=None):
    """Return decoded output from process."""
    if input is not None:
        input = input.encode(PREFERRED_ENCODING)

    output, error = process.communicate(input)

    output = None if output is None else output.decode(PREFERRED_ENCODING)
    error = None if error is None else error.decode(PREFERRED_ENCODING)

    return (output, error)


def _decode_output(value):
    """Decodes Git output into a unicode string.

    On Python 2 this is a no-op; on Python 3 we decode the string as
    suggested by [1] since we know that Git treats paths as just a sequence
    of bytes and all of the output we ask Git for is expected to be a file
    system path.

    [1] http://docs.python.org/3/c-api/unicode.html#file-system-encoding

    """
    if sys.hexversion < 0x3000000:
        return value
    return value.decode(sys.getfilesystemencoding(), 'surrogateescape')


def check_git_output(*popenargs, **kwargs):
    return _decode_output(check_output(*popenargs, **kwargs))


class RevParseError(Fatal):
    pass


def rev_parse(arg, abbrev=None):
    if abbrev:
        cmd = ['git', 'rev-parse', '--verify', '-q', '--short=%d' % (abbrev,), arg]
    else:
        cmd = ['git', 'rev-parse', '--verify', '-q', arg]

    try:
        return check_git_output(cmd).strip()
    except CalledProcessError:
        raise RevParseError('%r is not a valid commit!' % (arg,))


def rev_list(*args):
    """Iterate over the lines of output of rev-list

    Run `git rev-list` with the specified args, and iterate over the
    lines of output, one at a time, with whitespace stripped off.

    """

    process = subprocess.Popen(
        ['git', 'rev-list'] + list(args) + ['--'],
        stdout=subprocess.PIPE,
        )
    for line in process.stdout:
        yield _decode_output(line).strip()

    retcode = process.wait()
    if retcode:
        raise Fatal('git rev-list %s failed' % (' '.join(args),))


_empty_tree = None

def get_empty_tree():
    """Return the SHA-1 for the empty tree object.

    Also make sure it is present in the current repository."""

    global _empty_tree

    if _empty_tree is None:
        cmd = ['git', 'hash-object', '-t', 'tree', '-w', '--stdin']
        _empty_tree = check_output(cmd, stdin=open(os.devnull, 'rb')).rstrip()

    return _empty_tree


def refresh_index():
    process = subprocess.Popen(
        ['git', 'update-index', '-q', '--ignore-submodules', '--refresh'],
        stdout=subprocess.PIPE, stderr=subprocess.PIPE,
        )
    out, err = communicate(process)
    retcode = process.poll()
    if retcode:
        raise UncleanWorkTreeError(err.rstrip() or out.rstrip())


def unstaged_changes():
    """Return True iff there are unstaged changes in the working copy"""

    try:
        check_call(['git', 'diff-files', '--quiet', '--ignore-submodules'])
        return False
    except CalledProcessError:
        return True


def uncommitted_changes():
    """Return True iff the index contains uncommitted changes."""

    try:
        check_call([
            'git', 'diff-index', '--cached', '--quiet',
            '--ignore-submodules', 'HEAD', '--',
            ])
        return False
    except CalledProcessError:
        return True


def require_clean_work_tree(action):
    """Verify that the current tree is clean.

    The code is a Python translation of the git-sh-setup(1) function
    of the same name."""

    process = subprocess.Popen(
        ['git', 'rev-parse', '--verify', 'HEAD'],
        stdout=subprocess.PIPE, stderr=subprocess.PIPE,
        )
    err = communicate(process)[1]
    retcode = process.poll()
    if retcode:
        raise UncleanWorkTreeError(err.rstrip())

    refresh_index()

    error = []
    if unstaged_changes():
        error.append('Cannot %s: You have unstaged changes.' % (action,))

    if uncommitted_changes():
        if not error:
            error.append('Cannot %s: Your index contains uncommitted changes.' % (action,))
        else:
            error.append('Additionally, your index contains uncommitted changes.')

    if error:
        raise UncleanWorkTreeError('\n'.join(error))


FAIL_HEADER_TEMPLATE = """\

*******************************************************************************
FAILED ON COMMIT %(revision)s

"""

FAIL_TRAILER_TEMPLATE = """\
*******************************************************************************

FAILURE!
"""

class Test(object):
    def __init__(self, name):
        self.name = name
        self.notes_ref = 'tests/%s' % (self.name,)
        self.full_ref = 'refs/notes/tests/%s' % (self.name,)
        self._command = None

    def read_status(self, revision, revision_short):
        cmd = [
            'git', 'notes', '--ref=%s' % (self.notes_ref,),
            'show', '%s^{tree}' % (revision,),
            ]
        try:
            status = check_output(cmd, stderr=open(os.devnull, 'wb')).rstrip()
        except CalledProcessError:
            return 'unknown'

        if status not in ['good', 'bad']:
            raise Fatal(
                'fatal: unrecognized status %r for tree %s^{tree}!'
                % (status, revision_short),
                )

        return status

    def write_status(self, revision, value):
        cmd = [
            'git', 'notes', '--ref=%s' % (self.notes_ref,),
            'add', '-f', '%s^{tree}' % (revision,), '-m', value,
            ]
        try:
            check_call(cmd)
        except CalledProcessError:
            raise Fatal('fatal: error adding note to %s^{tree}' % (revision,))
        else:
            sys.stderr.write('Marked tree %s^{tree} to be %s\n' % (revision, value))

    def forget_status(self, revisions):
        """Forget the stored results (if any) for the specified revisions."""

        cmd = [
            'git', 'notes', '--ref=%s' % (self.notes_ref,),
            'remove', '--ignore-missing', '--stdin',
            ]

        try:
            process = subprocess.Popen(cmd, stdin=subprocess.PIPE)
            process.communicate(''.join('%s^{tree}\n' % (r,) for r in revisions))
            retcode = process.poll()
            if retcode:
                raise Fatal('fatal: error removing one or more existing notes')
        except CalledProcessError:
            raise Fatal('fatal: error removing one or more existing notes')

    @property
    def command(self):
        if self._command is None:
            cmd = ['git', 'config', '--get', 'test.%s.command' % (self.name,)]
            try:
                self._command = check_output(cmd).rstrip()
            except CalledProcessError:
                raise Fatal('fatal: test %s is not defined!' % (self.name,))
        return self._command

    def run(self):
        """Run this test against the current contents of the working tree."""

        cmd = ['sh', '-c', self.command]
        try:
            check_call(cmd)
        except CalledProcessError as e:
            raise UserTestError(e.returncode, e.cmd, e.output)

    def run_and_record(self, revision):
        try:
            self.run()
        except UserTestError as e:
            cmd = ['git', '--no-pager', 'log', '-1', '--decorate', revision]
            sys.stdout.write(FAIL_HEADER_TEMPLATE % dict(revision=revision))
            check_call(cmd)
            sys.stdout.write(FAIL_TRAILER_TEMPLATE % dict())
            self.write_status(revision, 'bad')
            raise
        else:
            self.write_status(revision, 'good')


def prepare_revision(r):
    cmd = ['git', 'checkout', r]
    try:
        check_call(cmd)
    except CalledProcessError as e:
        raise Fatal('fatal: error checking out commit %s' % (r,))

    cmd = ['git', '--no-pager', 'log', '-1', '--decorate', r]
    try:
        check_call(cmd)
    except CalledProcessError as e:
        raise Fatal('fatal: error displaying log for commit %s' % (r,))


def initialize_notes(name, msg):
    cmd = ['git', 'commit-tree', '-m', msg, get_empty_tree()]
    commit = check_output(cmd).rstrip()

    cmd = [
        'git', 'update-ref',
        '-m', 'test: %s' % (msg,),
        'refs/notes/tests/%s' % (name,), commit,
        ]
    check_call(cmd)


def remove_notes(name, msg):
    """Delete the note reference for the test named `name`."""

    cmd = ['git', 'update-ref', '-d', 'refs/notes/tests/%s' % (name,), '-m', msg]
    check_call(cmd)


REUSE_RESULTS_WARNING = """\
WARNING: there are already results stored for the test named '%(name)s'.
Those results will be considered valid for the new test. If that is
not what you want, please re-run this command with the '--forget' option.
"""


def cmd_add(parser, options):
    test = Test(options.test)

    cmd = ['git', 'config', 'test.%s.command' % (test.name,), options.command]
    check_call(cmd)

    if options.forget:
        initialize = True
    else:
        try:
            old_tree = rev_parse('%s^{tree}' % (test.full_ref,))
        except RevParseError:
            initialize = True
        else:
            # The notes reference already exists and we weren't asked
            # to `--forget`, so leave the existing notes in place:
            initialize = False
            if old_tree != get_empty_tree() and options.forget != False:
                # The notes reference already exists and contains
                # results and the user didn't explicitly ask for
                # `--keep`; emit a warning in case the user forgot to
                # `--forget`:
                sys.stderr.write(REUSE_RESULTS_WARNING % dict(name=test.name))

    if initialize:
        initialize_notes(test.name, 'Test results initialized by \'git test add\'')


def uniqify(l):
    """Iterate over the unique items in l, in the original order.

    Yield an item only the first time it is seen."""

    seen = set()
    for i in l:
        if i not in seen:
            yield i
            seen.add(i)


def cmd_run(parser, options):
    test = Test(options.test)

    sys.stderr.write('Using test %s; command: %s\n' % (test.name, test.command))

    try:
        require_clean_work_tree('test-run')
    except UncleanWorkTreeError:
        # Unclean work tree; the only action allowed in this state is
        # testing the working copy:
        if options.commits or options.stdin or options.forget:
            raise

        try:
            test.run()
        except UserTestError as e:
            sys.stdout.write('\n!!! TEST FAILED !!!\n')
            sys.exit(e.returncode)
        else:
            sys.stdout.write('\nTEST SUCCESSFUL\n')
        finally:
            sys.stdout.write(
                'Note: working tree is dirty; results will not be saved.\n'
                )
        return

    revisions = []

    if options.stdin:
        testing_head = False
    elif not options.commits:
        revisions.append(rev_parse('HEAD'))
        testing_head = True
    elif options.commits == ['HEAD']:
        testing_head = True
    else:
        testing_head = False

    for arg in options.commits:
        limits = arg.split('..')
        if len(limits) == 1:
            revisions.append(rev_parse('%s^{commit}' % (arg,)))
        elif len(limits) == 2:
            revisions.extend(rev_list('--reverse', arg))
        else:
            parser.error(
                'commit arguments must be single commits '
                'or of the form \'A..B\''
                )

    if options.stdin:
        revisions.extend(
            rev_parse('%s^{commit}' % (arg.strip(),))
            for arg in sys.stdin
            )

    revisions = list(uniqify(revisions))

    if not revisions:
        sys.stdout.write('NO COMMITS SPECIFIED! (so none failed)\n')
        return

    try:
        cmd = ['git', 'symbolic-ref', 'HEAD']
        head = check_output(cmd, stderr=open(os.devnull, 'wb')).rstrip()
    except CalledProcessError:
        cmd = ['git', 'rev-parse', 'HEAD']
        head = check_output(cmd).rstrip()

    if options.force or options.forget:
        test.forget_status(revisions)

        if options.forget:
            return

    last_failure = None
    fail_count = 0

    for r in revisions:
        cmd = ['git', 'rev-parse', '--short', r]
        rs = check_output(cmd).rstrip()
        status = test.read_status(r, rs)
        sys.stdout.write('Old status: %s\n' % (status,))

        if status == 'good':
            sys.stdout.write('Tree %s^{tree} is already known to be good.\n' % (rs,))
            continue

        if status == 'bad':
            if options.retest:
                sys.stdout.write(
                    'Tree %s^{tree} was previously tested to be bad; retesting...\n'
                    % (rs,)
                    )
                status = 'unknown'
                # fall through
            else:
                sys.stdout.write('Tree %s^{tree} is already known to be bad!\n' % (rs,))
                status = 'failed'
                if options.keep_going:
                    fail_count += 1
                else:
                    sys.exit(1)

        if status == 'unknown':
            if not testing_head:
                prepare_revision(r)

            try:
                test.run_and_record(r)
            except UserTestError as e:
                # This commit has failed the test.
                if options.keep_going:
                    last_failure = e.returncode
                    fail_count += 1
                else:
                    sys.exit(e.returncode)

    if not testing_head:
        cmd = ['git', 'checkout', '-f', re.sub(r'^refs/heads/', '', head)]
        check_call(cmd)

    sys.stdout.write('\n')
    if fail_count > 0:
        if fail_count == 1:
            sys.stdout.write('!!! %s TEST FAILED !!!\n' % (fail_count,))
        else:
            sys.stdout.write('!!! %s TESTS FAILED !!!\n' % (fail_count,))

        if last_failure is not None:
            sys.exit(last_failure)
        else:
            sys.exit(1)
    else:
        sys.stdout.write('ALL TESTS SUCCESSFUL\n')
        return


def cmd_forget_results(parser, options):
    test = Test(options.test)

    cmd = ['git', 'config', 'test.%s.command' % (test.name,)]
    try:
        check_call(cmd, stdout=open(os.devnull, 'wb'))
        test_defined = True
    except CalledProcessError:
        # There is no test defined; simply delete the notes reference:
        remove_notes(
            test.name, 'Test results deleted by \'git test forget-results\''
            )
    else:
        initialize_notes(
            test.name, 'Test results reinitialized by \'git test forget-results\''
            )


def cmd_remove(parser, options):
    test = Test(options.test)

    cmd = ['git', 'config', '--remove-section', 'test.%s' % (test.name,)]
    check_call(cmd)
    remove_notes(
        test.name, 'Test results deleted by \'git test remove\''
        )


def cmd_help(parser, options, subparsers):
    if options.cmd is not None:
        try:
            subparser = subparsers.choices[options.cmd]
        except KeyError:
            parser.error('Unknown subcommand: %r (%r)\n' % (options.cmd, type(options.cmd)))
        subparser.print_help()
    else:
        parser.print_help()

    parser.exit()


def main(args):
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        )
    subparsers = parser.add_subparsers(
        dest='subcommand', help='sub-command',
        parser_class=argparse.ArgumentParser,
        )

    subparser = subparsers.add_parser(
        'add',
        description=(
            'Define a new test by telling what command it should run.'
            ),
        help='define a new test',
        )
    subparser.add_argument(
        '--test', '-t', metavar='name',
        action='store', default='default',
        help='name of test to add (default is \'default\')',
        )
    subparser.add_argument(
        '--forget',
        action='store_true', default=None,
        help='forget any existing results',
        )
    subparser.add_argument(
        '--keep',
        action='store_false', dest='forget',
        help='keep any existing results (default)',
        )
    subparser.add_argument(
        'command',
        help='command to run',
        )

    def add_run_arguments(subparser):
        subparser.add_argument(
            '--test', '-t', metavar='name',
            action='store', default='default',
            help='name of test (default is \'default\')',
            )
        subparser.add_argument(
            '--force', '-f', action='store_true',
            help=(
                'forget any existing test results for the specified '
                'commits and test them again'
                ),
            )
        subparser.add_argument(
            '--forget', action='store_true',
            help='forget any existing test results for the specified commits',
            )
        subparser.add_argument(
            '--retest', action='store_true',
            help='if a commit is already marked as "bad", try testing it again',
            )
        subparser.add_argument(
            '--keep-going', '-k', action='store_true',
            help=(
                'if a commit fails the test, continue testing other commits '
                'rather than aborting'
                ),
            )
        subparser.add_argument(
            '--stdin', action='store_true',
            help=(
                'read the list of commits to test from standard input, '
                'one per line'
                ),
            )
        subparser.add_argument(
            'commits', nargs='*',
            help='commits or ranges of commits to test',
            )

    subparser = subparsers.add_parser(
        'run',
        description=(
            'Run COMMAND for each commit in the specified RANGE in reverse order, '
            'stopping if the command fails.  The return code is that of the last '
            'command executed (i.e., 0 only if the command succeeded for every '
            'specified commit).'
            ),
        help='run a test against one or more commits',
        )
    add_run_arguments(subparser)

    # This command is no longer supported, but emit a help message if
    # it is requested:
    subparser = subparsers.add_parser(
        'range',
        help='obsolete command; please use "git test run" instead',
        )
    # We need to accept the 'run' options and arguments, otherwise
    # argparse will emit an error about unrecognized arguments and
    # abort before we get a chance to emit our help message:
    add_run_arguments(subparser)

    subparser = subparsers.add_parser(
        'forget-results',
        description=(
            'Forget all stored test results for a test.'
            ),
        help='permanently forget stored results for a test',
        )
    subparser.add_argument(
        '--test', '-t', metavar='name',
        action='store', default='default',
        help='name of test whose results should be forgotten (default is \'default\')',
        )

    subparser = subparsers.add_parser(
        'remove',
        description=(
            'Remove a test definition and all of its stored results.'
            ),
        help='remove a test definition and all of its stored results',
        )
    subparser.add_argument(
        '--test', '-t', metavar='name',
        action='store', default='default',
        help='name of test to remove (default is \'default\')',
        )

    subparser = subparsers.add_parser(
        'help',
        description=(
            'Print out help for "git test" in general or for a specific '
            'subcommand.'
            ),
        help='print out help and exit',
        )
    subparser.add_argument(
        'cmd', nargs='?', default=None,
        help='subcommand that you want help for (optional)',
        )

    options = parser.parse_args(args)

    if options.subcommand == 'add':
        cmd_add(parser, options)
    elif options.subcommand == 'run':
        cmd_run(parser, options)
    elif options.subcommand == 'range':
        parser.error('the \'range\' subcommand has been renamed to \'run\'.')
    elif options.subcommand == 'forget-results':
        cmd_forget_results(parser, options)
    elif options.subcommand == 'remove':
        cmd_remove(parser, options)
    elif options.subcommand == 'help':
        cmd_help(parser, options, subparsers)
    else:
        parser.error('Unrecognized subcommand: "%s"' % (options.subcommand,))


if __name__ == '__main__':
    try:
        main(sys.argv[1:])
    except Fatal as e:
        sys.stderr.write('\nERROR!\n%s\n\n' % (e,))
        sys.exit(125)


